#!/bin/bash
# file: advpreproc
# usage: advpreproc subj workdir ismosaic ncpus fullreverseseq ismultiband

# note: for only with acquisitions with reverse sequnce - i.e. base subject directory must contain rawdataAP.mif and its reverse sequence rawdataPA.mif

subj=$1
WORKDIR=$2
ismultiband=$3

#Pull data from BIDS folders

mkdir -p $WORKDIR/Diff/$subj/preproc 

mrconvert dwi/${subj}_acq-AP_dwi.mif $WORKDIR/Diff/$subj/preproc/rawdataAP.mif -force -nthreads 1
mrconvert dwi/${subj}_acq-PA_dwi.mif $WORKDIR/Diff/$subj/preproc/rawdataPA.mif -force -nthreads 1

mrconvert anat/${subj}_T1w.nii.gz $WORKDIR/Diff/$subj/preproc/T1.nii -force -nthreads 1


#Now extract the encoding files, and rename

cp dwi/${subj}_acq-AP_dwi.b $WORKDIR/Diff/$subj/preproc/rawencoding.b


#Go to working directory

cd $WORKDIR/Diff/$subj/preproc


#Start preprocessing pipeline
#Denoise

dwidenoise rawdataAP.mif rawdataAPdn.mif -force -nthreads $ncpus

dwiextract rawdataPA.mif rawdataPArem.mif -bzero -force -nthreads $ncpus 
dwidenoise rawdataPArem.mif rawdataPAdn.mif -force -nthreads $ncpus

mrconvert rawdataAPdn.mif rawdataAPdnstr.mif -strides +1,2,3,4 -force -nthreads $ncpus
mrconvert rawdataAPdnstr.mif  rawdataAPdn.mif  -force -nthreads $ncpus

mrconvert rawdataPAdn.mif rawdataPAdnstr.mif -strides +1,2,3,4 -force -nthreads $ncpus
mrconvert rawdataPAdnstr.mif  rawdataPAdn.mif -strides +1,2,3,4 -force -nthreads $ncpus

rm rawdataPArem.mif
rm rawdataAPdnstr.mif
rm rawdataPAdnstr.mif 


#Generate b0 images for each phase-encoding direction

mrconvert rawdataAPdn.mif b0AP.mif -coord 3 0 -force -nthreads 1
mrconvert rawdataPAdn.mif b0PA.mif -coord 3 0 -force -nthreads 1

dwiextract rawdataAPdn.mif APb0s.mif -nthreads $ncpus -bzero -force
dwiextract rawdataPAdn.mif PAb0s.mif -nthreads $ncpus -bzero -force

#First check that number of b0 volumes match
numb0rev=$(mrinfo APb0s.mif -size | awk -F " " '{print $NF}')
numb0main=$(mrinfo PAb0s.mif -size | awk -F " " '{print $NF}')

if [ "$numb0rev" != "$numb0main" ];
then

mrcat b0AP.mif b0PA.mif allb0s.mif -axis 3 -force -nthreads $ncpus

else

mrcat APb0s.mif PAb0s.mif allb0s.mif -axis 3 -force -nthreads 1

fi

#Eddy correction & bias correction

if ([ $ismultiband = 1 ]); then

        #mrcat APb0s.mif rawdataPAdn.mif allb0s.mif -axis 3 -force -nthreads $ncpus
	dwipreproc -rpe_pair -se_epi allb0s.mif -align_seepi -pe_dir AP -export_grad_mrtrix adjencoding.b rawdataAPdn.mif eddycorr.mif -eddy_options " --repol --mb=2 --ol_type=both --slm=linear " -nthreads $ncpus -force -eddyqc_all dwipreproc

else

	#mrcat APb0s.mif rawdataPAdn.mif allb0s.mif -axis 3 -force -nthreads $ncpus
	dwipreproc -rpe_pair -se_epi allb0s.mif -align_seepi -pe_dir AP -export_grad_mrtrix adjencoding.b rawdataAPdn.mif eddycorr.mif -eddy_options " --repol --slm=linear " -nthreads $ncpus -force -eddyqc_all dwipreproc

fi

dwiextract eddycorr.mif -nthreads $ncpus -bzero - | mrmath -axis 3 - mean eddymeanb0.nii -force -nthreads $ncpus

bet2 eddymeanb0.nii eddyb0brainfsl -m -f 0.15

#dwi2mask eddycorr.mif eddymaskMR.nii -force -nthreads $ncpus


#bias correction

dwibiascorrect -mask eddyb0brainfsl_mask.nii.gz -ants eddycorr.mif biascorr.mif -nthreads $ncpus -force


#create optimal mask

dwi2mask biascorr.mif biasmaskMR.nii -force -nthreads $ncpus

fslmaths eddyb0brainfsl_mask -mas biasmaskMR.nii iterbrainmask

gunzip iterbrainmask.nii.gz -f

dwishellmath biascorr.mif mean meanshell.mif -nthreads $ncpus -force


#Create tensor and FA images

dwiextract biascorr.mif -nthreads $ncpus -bzero - | mrmath -axis 3 - mean biasmeanb0.nii -force -nthreads $ncpus

fslmaths biasmeanb0.nii -mas iterbrainmask.nii biasmeanb0masked

#gunzip -f biasmeanb0bet.nii.gz


#add further bet2 option so later pipeline doesn't break!

bet2 biasmeanb0masked biasmeanb0bet -f 0.10 -m 

dwi2tensor biascorr.mif dt.nii -mask iterbrainmask.nii -nthreads $ncpus -force

tensor2metric dt.nii -fa fa.nii -nthreads $ncpus -force
